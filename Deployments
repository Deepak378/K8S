Deployments:
•A Deployment provides declarative updates for pods andreplicasets.
•You describe a desired state in a Deployment, and the  Deployment Controller changes the actual state to the desired state at a  controlled rate. 
 You can define Deployments to create new ReplicaSets, or to  remove existing Deployments and adopt all their resources with new  Deployments.

Two types of built in strategies ->
1) RollingUpdate:---- default deployment startetgy
default if not defined
new ReplicaSet is created, then scaled up as the old ReplicaSet is scaled down
 
2) Recreate
removes all existing pods in the existing ReplicaSet first
then creates new pods in the new ReplicaSet

(for rolling update)
----------------------------------
step-1 (create deployment)
# kubectl  get deployment
# kubectl explain deployment |less

apiVersion: apps/v1                
kind: Deployment                   
metadata:                          
 name: mydeploy                    
spec:                              
 replicas: 6                       
 selector:                         
  matchLabels:                     
   flower: marigold                
 template:                         
  metadata:                        
   labels:                         
    flower: marigold                             
  spec:                            
   containers:                     
   - name: training                
     image: nginx
     imagePullPolicy: IfNotPresent
                                   
# kubectl  get deployments.apps -o wide

       
step-2
(expose  apps against service)

# kubectl expose deployment mydeploy --target-port 80 --port 80 --name production-svc --type LoadBalancer

step-3 (update version)
# kubectl set image deployment mydeploy training=nginx:1.2 --record
# kubectl set image deployment mydeploy training=nginx:1.3 --record
# kubectl set image deployment mydeploy training=nginx:1.4 --record
# kubectl set image deployment mydeploy training=nginx:1.5 --record


step-4 (for collecting hist)
# kubectl  rollout history deployment mydeploy

step-5 (change version)/ rollback
--------------------------
# kubectl  rollout undo deployment mydeploy 
# kubectl  rollout undo deployment mydeploy --to-revision 2


step-6:-- (scaling)
------------------
# kubectl scale deployment mydeploy --replicas 10

       
       
 Deployments for Recreate:
-----------------------------------------------------------------------------------------------------------------------
    
apiVersion: apps/v1 
kind: Deployment    
metadata:        
 name: mydeploy-recreate
spec:            
 strategy:       
  type: Recreate
 replicas: 6     
 selector:       
  matchLabels:      
   flower: marigold1 
 template:       
  metadata:      
   labels:       
    flower: marigold1
  spec:          
   containers:   
   - name: training 
     image: nginx1
     imagePullPolicy: IfNotPresent
   


2nd process of deployment:---( we will divide customer traffic b/w diff version deployment)
======================

step-1 (create old apps):
________________________________
apiVersion: apps/v1      
kind: Deployment         
metadata:                
 name: olddeploy         
spec:                    
 replicas: 6             
 selector:               
  matchLabels:           
   flower: marigold      
 template:               
  metadata:              
   labels:               
    flower: marigold     
  spec:                  
   containers:           
   - name: training      
     image: nginx:1.2
     imagePullPolicy: IfNotPresent

step- 2 (expose deployment against service)
------------------------------------------
# kubectl expose deployment olddeploy --target-port 80 --port 80 --name combo-svc --type LoadBalancer

step-3 (create new deployment with same label)
_________________________________________________________________________
apiVersion: apps/v1                               
kind: Deployment                                  
metadata:                                         
 name: newdeploy                                  
spec:                                             
 replicas: 4                                      
 selector:                                        
  matchLabels:                                    
   flower: marigold                               
 template:                                        
  metadata:                                       
   labels:                                        
    flower: marigold                              
  spec:                                           
   containers:                                    
   - name: school                                 
     image: nginx:1.5
     imagePullPolicy: IfNotPresent   


(Blue Green deployment)
-----------------------------------------------------------------------------
Blue--- old apps
Green- new apps
labs:---
step1 (for old/blue deployment)
-------------------
apiVersion: apps/v1
kind: Deployment
metadata:      
 name: blue-deploy
spec:          
 replicas: 6   
 selector:     
  matchLabels: 
   soft: blue  
 template:     
  metadata:    
   labels:     
    soft: blue
  spec:        
   containers: 
   - name: training
     image: nginx
     imagePullPolicy: IfNotPresent
                                    
step-2 (configure service)
---------
# kubectl expose deployment blue-deploy --target-port 80 --port 80 --name blue-green-svc --type LoadBalancer


step-3 (create green/new deploy & test it)
------------
apiVersion: apps/v1                               
kind: Deployment                                  
metadata:                                         
 name: green-deploy                               
spec:                                             
 replicas: 6                                      
 selector:                                        
  matchLabels:                                    
   soft: green                                    
 template:                                        
  metadata:                                       
   labels:                                        
    soft: green                                   
  spec:                                           
   containers:                                    
   - name: training                               
     image: nginx
     imagePullPolicy: IfNotPresent                
~                                   

step-4 (check apps of new deployment --- if it is perfect then switch your service from blue to green deployment)

# kubectl  get svc -o wide
# kubectl edit svc blue-green-svc
